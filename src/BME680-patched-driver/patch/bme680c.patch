--- BME680_driver/bme680.c	2020-06-09 11:55:19.119837479 +0100
+++ bme680e.c	2020-06-09 14:11:14.104265368 +0100
@@ -142,75 +142,11 @@
 static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev);
 
 #else
-/*!
- * @brief This internal API is used to calculate the
- * temperature value value in float format
- *
- * @param[in] dev	:Structure instance of bme680_dev.
- * @param[in] temp_adc	:Contains the temperature ADC value .
- *
- * @return Calculated temperature in float
- */
-static float calc_temperature(uint32_t temp_adc, struct bme680_dev *dev);
-
-/*!
- * @brief This internal API is used to calculate the
- * pressure value value in float format
- *
- * @param[in] dev	:Structure instance of bme680_dev.
- * @param[in] pres_adc	:Contains the pressure ADC value .
- *
- * @return Calculated pressure in float.
- */
-static float calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev);
-
-/*!
- * @brief This internal API is used to calculate the
- * humidity value value in float format
- *
- * @param[in] dev	:Structure instance of bme680_dev.
- * @param[in] hum_adc	:Contains the humidity ADC value.
- *
- * @return Calculated humidity in float.
- */
-static float calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev);
-
-/*!
- * @brief This internal API is used to calculate the
- * gas resistance value value in float format
- *
- * @param[in] dev		:Structure instance of bme680_dev.
- * @param[in] gas_res_adc	:Contains the Gas Resistance ADC value.
- * @param[in] gas_range		:Contains the range of gas values.
- *
- * @return Calculated gas resistance in float.
- */
-static float calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev);
-
-/*!
- * @brief This internal API is used to calculate the
- * heater resistance value in float format
- *
- * @param[in] temp	: Contains the target temperature value.
- * @param[in] dev	: Structure instance of bme680_dev.
- *
- * @return Calculated heater resistance in float.
- */
 static float calc_heater_res(uint16_t temp, const struct bme680_dev *dev);
 
 #endif
 
 /*!
- * @brief This internal API is used to calculate the field data of sensor.
- *
- * @param[out] data :Structure instance to hold the data
- * @param[in] dev	:Structure instance of bme680_dev.
- *
- *  @return int8_t result of the field data from sensor.
- */
-static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev);
-
-/*!
  * @brief This internal API is used to set the memory page
  * based on register address.
  *
@@ -689,31 +625,6 @@
 }
 
 /*!
- * @brief This API reads the pressure, temperature and humidity and gas data
- * from the sensor, compensates the data and store it in the bme680_data
- * structure instance passed by the user.
- */
-int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
-{
-	int8_t rslt;
-
-	/* Check for null pointer in the device structure*/
-	rslt = null_ptr_check(dev);
-	if (rslt == BME680_OK) {
-		/* Reading the sensor data in forced mode only */
-		rslt = read_field_data(data, dev);
-		if (rslt == BME680_OK) {
-			if (data->status & BME680_NEW_DATA_MSK)
-				dev->new_fields = 1;
-			else
-				dev->new_fields = 0;
-		}
-	}
-
-	return rslt;
-}
-
-/*!
  * @brief This internal API is used to read the calibrated data from the sensor.
  */
 static int8_t get_calib_data(struct bme680_dev *dev)
@@ -959,35 +870,6 @@
 }
 
 /*!
- * @brief This internal API is used to calculate the Gas Resistance value.
- */
-static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
-{
-	int64_t var1;
-	uint64_t var2;
-	int64_t var3;
-	uint32_t calc_gas_res;
-	/**Look up table 1 for the possible gas range values */
-	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
-		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
-		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
-		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
-	/**Look up table 2 for the possible gas range values */
-	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
-		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
-		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
-		UINT32_C(250000), UINT32_C(125000) };
-
-	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
-		((int64_t) lookupTable1[gas_range])) >> 16;
-	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
-	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
-	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
-
-	return calc_gas_res;
-}
-
-/*!
  * @brief This internal API is used to calculate the Heat Resistance value.
  */
 static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
@@ -1016,132 +898,102 @@
 
 #else
 
-
 /*!
  * @brief This internal API is used to calculate the
  * temperature value in float format
  */
-static float calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
+float calc_temperature(float temp_adc, float par_t1, float par_t2, float par_t3)
 {
-	float var1 = 0;
-	float var2 = 0;
-	float calc_temp = 0;
+        float var1 = 0;
+        float var2 = 0;
+        float calc_temp = 0;
 
-	/* calculate var1 data */
-	var1  = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f))
-			* ((float)dev->calib.par_t2));
-
-	/* calculate var2 data */
-	var2  = (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
-		(((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) *
-		((float)dev->calib.par_t3 * 16.0f));
+        /* calculate var1 data */
+        var1  = (((temp_adc / 16384.0f) - (par_t1 / 1024.0f))
+                        * (par_t2));
 
-	/* t_fine value*/
-	dev->calib.t_fine = (var1 + var2);
+        /* calculate var2 data */
+        var2  = ((((temp_adc / 131072.0f) - (par_t1 / 8192.0f)) *
+                ((temp_adc / 131072.0f) - (par_t1 / 8192.0f))) *
+                (par_t3 * 16.0f));
 
-	/* compensated temperature data*/
-	calc_temp  = ((dev->calib.t_fine) / 5120.0f);
+        /* t_fine value*/
+        float t_fine = (var1 + var2);
 
-	return calc_temp;
+        /* compensated temperature data*/
+        calc_temp  = ((t_fine) / 5120.0f);
+
+        return calc_temp;
 }
 
 /*!
  * @brief This internal API is used to calculate the
  * pressure value in float format
  */
-static float calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
+float calc_pressure(float pres_adc, float t_fine, float par_p1, float par_p2, float par_p3, float par_p4, float par_p5, float par_p6, float par_p7, float par_p8, float par_p9, float par_p10)
 {
-	float var1 = 0;
-	float var2 = 0;
-	float var3 = 0;
-	float calc_pres = 0;
-
-	var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
-	var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
-	var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
-	var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
-	var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f)
-		+ ((float)dev->calib.par_p2 * var1)) / 524288.0f);
-	var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
-	calc_pres = (1048576.0f - ((float)pres_adc));
-
-	/* Avoid exception caused by division by zero */
-	if ((int)var1 != 0) {
-		calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
-		var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
-		var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
-		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f)
-			* (dev->calib.par_p10 / 131072.0f));
-		calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
-	} else {
-		calc_pres = 0;
-	}
+        float var1 = 0;
+        float var2 = 0;
+        float var3 = 0;
+        float calc_pres = 0;
+        t_fine = t_fine * 5120.0f;
+        var1 = ((t_fine / 2.0f) - 64000.0f);
+        var2 = var1 * var1 * ((par_p6) / (131072.0f));
+        var2 = var2 + (var1 * (par_p5) * 2.0f);
+        var2 = (var2 / 4.0f) + ((par_p4) * 65536.0f);
+        var1 = ((((par_p3 * var1 * var1) / 16384.0f)
+                + (par_p2 * var1)) / 524288.0f);
+        var1 = ((1.0f + (var1 / 32768.0f)) * (par_p1));
+        calc_pres = (1048576.0f - (pres_adc));
+
+        /* Avoid exception caused by division by zero */
+        if ((int)var1 != 0) {
+                calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
+                var1 = ((par_p9) * calc_pres * calc_pres) / 2147483648.0f;
+                var2 = calc_pres * ((par_p8) / 32768.0f);
+                var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f)
+                        * (par_p10 / 131072.0f));
+                calc_pres = (calc_pres + (var1 + var2 + var3 + (par_p7 * 128.0f)) / 16.0f);
+        } else {
+                calc_pres = 0;
+        }
 
-	return calc_pres;
+        return calc_pres;
 }
 
 /*!
  * @brief This internal API is used to calculate the
  * humidity value in float format
  */
-static float calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
+float calc_humidity(float hum_adc, float t_fine, float par_h1, float par_h2, float par_h3, float par_h4, float par_h5, float par_h6, float par_h7)
 {
-	float calc_hum = 0;
-	float var1 = 0;
-	float var2 = 0;
-	float var3 = 0;
-	float var4 = 0;
-	float temp_comp;
-
-	/* compensated temperature data*/
-	temp_comp  = ((dev->calib.t_fine) / 5120.0f);
-
-	var1 = (float)((float)hum_adc) - (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f)
-		* temp_comp));
+        float calc_hum = 0;
+        float var1 = 0;
+        float var2 = 0;
+        float var3 = 0;
+        float var4 = 0;
+        float temp_comp = t_fine;
 
-	var2 = var1 * ((float)(((float) dev->calib.par_h2 / 262144.0f) * (1.0f + (((float)dev->calib.par_h4 / 16384.0f)
-		* temp_comp) + (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
+        /* compensated temperature data*/
 
-	var3 = (float) dev->calib.par_h6 / 16384.0f;
+        var1 = (hum_adc) - ((par_h1 * 16.0f) + ((par_h3 / 2.0f)
+                * temp_comp));
 
-	var4 = (float) dev->calib.par_h7 / 2097152.0f;
+        var2 = var1 * ((( par_h2 / 262144.0f) * (1.0f + (((par_h4 / 16384.0f)
+                * temp_comp) + (par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 
-	calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
+        var3 = par_h6 / 16384.0f;
 
-	if (calc_hum > 100.0f)
-		calc_hum = 100.0f;
-	else if (calc_hum < 0.0f)
-		calc_hum = 0.0f;
+        var4 = par_h7 / 2097152.0f;
 
-	return calc_hum;
-}
+        calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 
-/*!
- * @brief This internal API is used to calculate the
- * gas resistance value in float format
- */
-static float calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
-{
-	float calc_gas_res;
-	float var1 = 0;
-	float var2 = 0;
-	float var3 = 0;
-
-	const float lookup_k1_range[16] = {
-	0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, -0.8,
-	0.0, 0.0, -0.2, -0.5, 0.0, -1.0, 0.0, 0.0};
-	const float lookup_k2_range[16] = {
-	0.0, 0.0, 0.0, 0.0, 0.1, 0.7, 0.0, -0.8,
-	-0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
-
-	var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
-	var2 = (var1) * (1.0f + lookup_k1_range[gas_range]/100.0f);
-	var3 = 1.0f + (lookup_k2_range[gas_range]/100.0f);
-
-	calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * (float)(1 << gas_range) * (((((float)gas_res_adc)
-		- 512.0f)/var2) + 1.0f));
+        if (calc_hum > 100.0f)
+                calc_hum = 100.0f;
+        else if (calc_hum < 0.0f)
+                calc_hum = 0.0f;
 
-	return calc_gas_res;
+        return calc_hum;
 }
 
 /*!
@@ -1195,62 +1047,6 @@
 }
 
 /*!
- * @brief This internal API is used to calculate the field data of sensor.
- */
-static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
-{
-	int8_t rslt;
-	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
-	uint8_t gas_range;
-	uint32_t adc_temp;
-	uint32_t adc_pres;
-	uint16_t adc_hum;
-	uint16_t adc_gas_res;
-	uint8_t tries = 10;
-
-	/* Check for null pointer in the device structure*/
-	rslt = null_ptr_check(dev);
-	do {
-		if (rslt == BME680_OK) {
-			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
-				dev);
-
-			data->status = buff[0] & BME680_NEW_DATA_MSK;
-			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
-			data->meas_index = buff[1];
-
-			/* read the raw data from the sensor */
-			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
-				| ((uint32_t) buff[4] / 16));
-			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
-				| ((uint32_t) buff[7] / 16));
-			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
-			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
-			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
-
-			data->status |= buff[14] & BME680_GASM_VALID_MSK;
-			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
-
-			if (data->status & BME680_NEW_DATA_MSK) {
-				data->temperature = calc_temperature(adc_temp, dev);
-				data->pressure = calc_pressure(adc_pres, dev);
-				data->humidity = calc_humidity(adc_hum, dev);
-				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
-				break;
-			}
-			/* Delay to poll the data */
-			dev->delay_ms(BME680_POLL_PERIOD_MS);
-		}
-		tries--;
-	} while (tries);
-
-	if (!tries)
-		rslt = BME680_W_NO_NEW_DATA;
-
-	return rslt;
-}
-
-/*!
  * @brief This internal API is used to set the memory page based on register address.
  */
 static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
